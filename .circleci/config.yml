workflows:
  version: 2
  build-deploy:
    jobs:
      - unit-test
      - test-chrome:
          requires:
            - unit-test
      - test-ie:
          requires:
            - unit-test
      - SCA:
          requires:
            - unit-test
      - package-jar:
          requires:
            - unit-test
          filters:
            branches:
              only: master
      - package-docker:
          requires:
            - unit-test
          filters:
            branches:
              only: master
      - deploy-docker:
          requires:
            - package-docker
          filters:
            branches:
              only: master
      - dark-deploy:
          requires:
            - package-jar
          filters:
            branches:
              only: master
      - hold:
          type: approval
          requires:
            - dark-deploy
            - test-ie
            - test-chrome
          filters:
            branches:
              only: master
      - live-deploy:
          requires:
            - hold
          filters:
            branches:
              only: master




version: 2
jobs:
  unit-test:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - blueskygreenbuilds-mvn-V2-{{ checksum "pom.xml" }}
            - blueskygreenbuilds-mvn-V2

      - run: mvn dependency:go-offline
      - run:
          name: Build and *unit* test
          command: |
            mvn test -B  #run your tests


      - save_cache:
          paths:
           - ~/.m2
          key: blueskygreenbuilds-mvn-V2-{{ checksum "pom.xml" }}

      - store_test_results:
          path: target/surefire-reports


  test-chrome:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - blueskygreenbuilds-mvn-V2-{{ checksum "pom.xml" }}
            - blueskygreenbuilds-mvn-V2

      - run: mvn dependency:go-offline

      - run:
          name: Start SauceLabs Tunnel (required if testing on CircleCI container)
          command: |
            : ${SAUCELABS_USER:?"Required Env Variable not found!"}
            : ${SAUCELABS_KEY:?"Required Env Variable not found!"}
            curl https://saucelabs.com/downloads/sc-4.4.12-linux.tar.gz -o saucelabs.tar.gz
            tar -xzf saucelabs.tar.gz
            cd sc-*
            # startup saucelabs tunnel as background task (its a blocking command)
            bin/sc -u ${SAUCELABS_USER} -k ${SAUCELABS_KEY} -i chrome &
            #wait for sauce tunnel up to 1 minute
            wget --retry-connrefused --no-check-certificate -T 60 localhost:4445

      - run:
          name: Build and Integration test
          command: |
            mvn verify -B -Dspring.profiles.active=it -Dsauce.browser=chrome  -Dsauce.tunnel="chrome" #package and run your browser tests
            killall sc #kill saucelabs tunnel
      - save_cache:
          paths:
           - ~/.m2
          key: blueskygreenbuilds-mvn-V2-{{ checksum "pom.xml" }}


  test-ie:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - blueskygreenbuilds-mvn-V2-{{ checksum "pom.xml" }}
            - blueskygreenbuilds-mvn-V2

      - run: mvn dependency:go-offline

      - run:
          name: Start SauceLabs Tunnel (required if testing on CircleCI container)
          command: |
            : ${SAUCELABS_USER:?"Required Env Variable not found!"}
            : ${SAUCELABS_KEY:?"Required Env Variable not found!"}
            curl https://saucelabs.com/downloads/sc-4.4.12-linux.tar.gz -o saucelabs.tar.gz
            tar -xzf saucelabs.tar.gz
            cd sc-*
            # startup saucelabs tunnel as background task (its a blocking command)
            bin/sc -u ${SAUCELABS_USER} -k ${SAUCELABS_KEY} -i ie &
            #wait for sauce tunnel up to 1 minute
            wget --retry-connrefused --no-check-certificate -T 60 localhost:4445

      - run:
          name: Build and Integration test
          command: |
            mvn verify -B -Dspring.profiles.active=it -Dsauce.version=11.103 -Dsauce.tunnel="ie" -Dsauce.browser="internet explorer" #package and run your browser tests
            killall sc #kill saucelabs tunnel


      - save_cache:
          paths:
           - ~/.m2
          key: blueskygreenbuilds-mvn-V2-{{ checksum "pom.xml" }}

  SCA:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - blueskygreenbuilds-mvn-V2-{{ checksum "pom.xml" }}
            - blueskygreenbuilds-sonar-mvn-{{ checksum "pom.xml" }}
      - restore_cache:
          key: blueskygreenbuilds-sonar
      - run:
          name: Static Code Analysis (SonarQube)
          command: |
            mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar \
                 -Dsonar.host.url=https://sonarcloud.io \
                 -Dsonar.organization=circleci-demo \
                 -Dsonar.login=${SONAR_KEY} \
                 -Dsonar.branch.name=${CIRCLE_BRANCH}
      - save_cache:
          paths:
           - ~/.sonar/cache
          key: blueskygreenbuilds-sonar
      - save_cache:
          paths:
           - ~/.m2
          key: blueskygreenbuilds-sonar-mvn-{{ checksum "pom.xml" }}




  package-jar:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - blueskygreenbuilds-mvn-V2-{{ checksum "pom.xml" }}
            - blueskygreenbuilds-mvn-V2
      - run: mvn dependency:go-offline
      - save_cache:
          paths:
           - ~/.m2
          key: blueskygreenbuilds-mvn-V2-{{ checksum "pom.xml" }}
      - run:
          name: Package Jar
          command: |
            mvn package -B -DskipTests=true
      - run:
          name: Copy deployment artifacts to workspace
          command: |
            cp target/blueskygreenbuilds-*.jar /tmp/standalone-app.jar
            cp src/main/resources/deployment/cf-manifest.yml /tmp/
      - store_artifacts:
          path: /tmp/standalone-app.jar
      - store_artifacts:
          path: /tmp/cf-manifest.yml
      - persist_to_workspace:
                root: /tmp
                paths:
                  - standalone-app.jar
                  - cf-manifest.yml

  package-docker:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - blueskygreenbuilds-mvn-V2-{{ checksum "pom.xml" }}
            - blueskygreenbuilds-mvn-V2
      - run: mvn dependency:go-offline
      - run: cp .mvn/wrapper/settings.xml ~/.m2/settings.xml
      - run: echo "<settingsSecurity><master>${maven_security_master}</master></settingsSecurity>" > ~/.m2/settings-security.xml
      - setup_remote_docker
      - run:
          name: Package Docker image with Jib
          command: |
            ./mvnw compile jib:build -B -DskipTests=true


  deploy-docker:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - run: 
          name: Install gcloud SDK
          command: |
            # Create environment variable for correct distribution
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            # Add the Cloud SDK distribution URI as a package source
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            # Import the Google Cloud Platform public key
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            # Update the package list and install the Cloud SDK
            sudo apt-get update -y && sudo apt-get install -y google-cloud-sdk kubectl
      - run: 
          name: Initialize & Authenticate gcloud SDK
          command: |
            while read LINE; do eval echo $LINE; done < .circleci/gcp_key.json > /tmp/gcp_key.json
            #gcloud init --console-only
            gcloud auth activate-service-account --key-file /tmp/gcp_key.json
            gcloud config set project research-180616
            gcloud config set compute/zone us-central1-a
            gcloud container clusters get-credentials blueskygreenbuilds
            kubectl run blueskygreenbuilds --image=hub.docker.com/r/eddiewebb/blueskygreenbuilds-demo --port 8080 || kubectl set image deployment/blueskygreenbuilds blueskygreenbuilds=eddiewebb/blueskygreenbuilds-demo
            kubectl expose deployment blueskygreenbuilds --type=LoadBalancer --port 80 --target-port 8080
            kubectl service get

  dark-deploy:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/deploy
    steps:
      # why rebuild something we already tested, rebuilding invalidates any previous confidence?!
      - attach_workspace:
          at: /tmp

      #- run: queueBuildUntilFrontOfLine 5 #do not run parallel deployments
      - run:
          name: Setup CF CLI
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.run.pivotal.io
            cf auth $CF_USER $CF_PASSWORD
            cf target -o eddies-org -s circleci

      - run:
          name: CF Deploy
          command: |
            # Copy deployable jar and CF Manifest to current dir
            cp /tmp/standalone-app.jar .
            cp /tmp/cf-manifest.yml .
            cf push --no-start blueskygreenbuilds-dark -f cf-manifest.yml -p standalone-app.jar -n dark -d blueskygreenbuilds.com
            cf set-env blueskygreenbuilds-dark circle_build_num ${CIRCLE_BUILD_NUM}
            cf set-env blueskygreenbuilds-dark circle_commit ${CIRCLE_SHA1}
            cf set-env blueskygreenbuilds-dark circle_workflow_guid ${CIRCLE_WORKFLOW_ID}
            cf set-env blueskygreenbuilds-dark circle_user ${CIRCLE_PROJECT_USERNAME}
            cf set-env blueskygreenbuilds-dark circle_repo ${CIRCLE_PROJECT_REPONAME}


            # Push as "dark" instance (URL in manifest)
            cf start blueskygreenbuilds-dark
            # Ensure dark route is exclusive to dark app
            cf unmap-route blueskygreenbuilds blueskygreenbuilds.com -n dark || echo "Already exclusive"
            # Verify new version is working on dark URL.
            HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" http://dark.blueskygreenbuilds.com/`
            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route note available, failing deploy"
              exit 1
            fi


  live-deploy:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/deploy
    steps:
      # why rebuild something we already tested, rebuilding invalidates any previous confidence?!
      - attach_workspace:
          at: /tmp

      #- run: queueBuildUntilFrontOfLine 5 #do not run parallel deployments
      - run:
          name: Setup CF CLI
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.run.pivotal.io
            cf auth $CF_USER $CF_PASSWORD
            cf target -o eddies-org -s circleci

      - run:
          name: Re-route live Domain to latest
          command: |
            # Verify new version is working on dark URL.
            HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" http://dark.blueskygreenbuilds.com/`
            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route note available, failing deploy"
              exit 1
            fi
            # Send "real" url to new version
            cf map-route blueskygreenbuilds-dark blueskygreenbuilds.com -n www
            sleep 15  # give time to demo round robin
            # Stop sending traffic to previous version
            cf unmap-route blueskygreenbuilds blueskygreenbuilds.com -n www
            # stop previous version
            cf stop blueskygreenbuilds
            # delete previous version
            cf delete blueskygreenbuilds -f
            # Switch name of "dark" version to claim correct name
            cf rename blueskygreenbuilds-dark blueskygreenbuilds
