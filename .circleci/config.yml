version: 2.1
orbs:
  cloudfoundry: circleci/cloudfoundry@0.1.12
  slack:        circleci/slack@0.1.0
  saucelabs:    saucelabs/sauce-connect@1.0.1
  maven:        
    executors:
      maven:
        description: The docker container to use when running Maven builds
        docker:
          - image: circleci/openjdk:8-jdk-node

    commands:
      with_cache:
        description: |
          Run a set of steps with Maven dependencies cached.

          This command will first restore a cache of maven dependencies, if one was
          saved by a previous build. The provided `steps` will then be executed, and
          if successful, then a fresh cache will be saved, if required.

          The contents of the `~/.m2` directory is cached, which will substantially
          improve build times for projects with many dependencies.

          The cache-key is generated from any files named `pom.xml` that are
          present in the `working_directory`.
        parameters:
          steps:
            type: steps
        steps:
          - run:
              name: Generate Cache Checksum
              command: find . -name 'pom.xml' -exec cat {} + | shasum | awk '{print $1}' > /tmp/maven_cache_seed
          - restore_cache:
              key: maven-{{ checksum "/tmp/maven_cache_seed" }}
          - run:
              name: Install Dependencies
              command: mvn dependency:go-offline
          - steps: << parameters.steps >>
          - save_cache:
              paths:
                - ~/.m2
              key: maven-{{ checksum "/tmp/maven_cache_seed" }}
      process_test_results:
        description: |
          Upload test results.

          This will populate the Test Summary tab in the CircleCI UI. By default it will
          look in `target/surefire-reports` (the default location for maven test results).
          You can override where to find the test results with the path parameter.
        parameters:
          test_results_path:
            type: string
        steps:
          - store_test_results:
              path: << parameters.test_results_path >>

    jobs:
      test:
        description: |
          Checkout, build, test, and upload test results for a Maven project.
        executor: <<parameters.executor>>
        parameters:
          executor:
            description: The name of custom executor to use
            type: executor
            default: maven
          command:
            description: The maven command to run.
            type: string
            default: verify
          test_results_path:
            description: The path to the test results.
            type: string
            default: target/surefire-reports

        steps:
          - checkout      
          - with_cache:
              steps:
                - run:
                    name: Run Tests
                    command: mvn << parameters.command >>
          - process_test_results:
              test_results_path: << parameters.test_results_path >>



      parallel_test:
        description: |
          Checkout, build, test, and upload test results for a Maven project spreading tests across multiple nodes
        executor: <<parameters.executor>>
        parallelism: <<parameters.parallelism>>
        parameters:
          executor:
            description: The name of custom executor to use
            type: executor
            default: maven
          command:
            description: The maven command to run.
            type: string
            default: verify
          test_results_path:
            description: The path to the test results.
            type: string
            default: target/surefire-reports
          parallelism:
            description: How many nodes should testing be split across?
            type: integer
            default: 2
          parallel_test_pattern:
            description: This is the standard Surefire pattern,but you can override if you use alternate <includes> patterns in your pom.xml
            type: string
            default: "**/*Test*.java"
          parallel_it_pattern:
            description: This is the standard Failsafe pattern,but you can override if you use alternate <includes> patterns in your pom.xml.
            type: string
            default: "**/*IT*.java"
          test_directory:
            description: If following standard maven conventions this does not need to be changed.
            type: string
            default: "src/test/java"

        environment:
          TEST_PATTERN: <<parameters.parallel_test_pattern>>
          IT_PATTERN: <<parameters.parallel_it_pattern>>
        steps:
          - checkout 
          
          - run:
              name: Enable Test Splitting
              command: |
                # READ THIS
                # Caveat 1) CircleCI Test Splitting usese filename by default, but Java JUnit reports do not use filenames, they use classnames.
                #           Forunately the tranlation is very standard since conflicting file/classnames won't compile.
                # Caveat 2) Surefire and Failsafe both append <includes> (which can come from parent projects) to any -DincludeFIles argument (meaning it would still run all tests on every node)
                #           The solution to this is to generate an exclusion list, that is tests being run on the other nodes, and pass that to sirefire/failsafe
                # Debugging We place all decision files in .circleci/tests and export it as an artifact for inspection/debugging.

                mkdir -p .circleci/tests/

                # genrate excludes surefire tests using provided pattern
                circleci tests glob <<parameters.test_directory>>/<<parameters.parallel_test_pattern>> | sed -e 's#^<<parameters.test_directory>>/\(.*\)\.java#\1#' | tr "/" "." > .circleci/tests/surefire_classnames
                cat .circleci/tests/surefire_classnames | circleci tests split --split-by=timings --timings-type=classname > /tmp/this_node_tests
                cat .circleci/tests/surefire_classnames | grep -xvf /tmp/this_node_tests > .circleci/tests/surefire_classnames_ignore_list

                #generate excluded failsafe tests using provided pattern
                circleci tests glob <<parameters.test_directory>>/<<parameters.parallel_it_pattern>> | sed -e 's#^<<parameters.test_directory>>/\(.*\)\.java#\1#' | tr "/" "." > .circleci/tests/failsafe_classnames
                cat .circleci/tests/failsafe_classnames | circleci tests split --split-by=timings --timings-type=classname > /tmp/this_node_it_tests
                cat .circleci/tests/failsafe_classnames |  grep -xvf /tmp/this_node_it_tests > .circleci/tests/failsafe_classnames_ignore_list
          - store_artifacts:
              path: .circleci/tests/

          - with_cache:
              steps:
                - run:
                    name: Run Tests
                    command: mvn << parameters.command >> -Dsurefire.excludesFile=.circleci/tests/surefire_classnames_ignore_list -Dfailsafe.excludesFile=.circleci/tests/failsafe_classnames_ignore_list 
          - process_test_results:
              test_results_path: << parameters.test_results_path >>










executors:
  my-excutor:
    docker:
      - image: circleci/openjdk:8


workflows:
  version: 2
  build_deploy:
    jobs:
      - maven/parallel_test:
          name: "Unit Test"
          executor: my-excutor
          command: "test -B"
          post-steps:
            - run:
                name: Collect Code Cov
                command: |
                  curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
                  chmod +x ./cc-test-reporter
                  ./mvnw jacoco:report #convert binary jacoco.exec to XML in target/site/jacoco
                  export JACOCO_SOURCE_PATH="src/main/java"
                  ./cc-test-reporter format-coverage -t jacoco  target/site/jacoco/jacoco.xml -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"
            - persist_to_workspace:
                root: coverage
                paths:
                  - codeclimate.*.json

      - sum-coverage:
          requires:
            - "Unit Test"
      - saucelabs/with_proxy:
          name: "Chrome Tests"
          requires:
            - "Unit Test"
          tunnel_identifier: chrome
          steps:
            - maven/with_cache:
                steps:
                  - run: ./mvnw verify -B -Dspring.profiles.active=it -Dsauce.tunnel="chrome" 

      - saucelabs/with_proxy:
          name: "IE Tests"
          requires:
            - "Unit Test"
          tunnel_identifier: ie
          steps:
            - maven/with_cache:
                steps:
                  - run: ./mvnw verify -B -Dspring.profiles.active=it -Dsauce.version=11.103 -Dsauce.tunnel="ie" -Dsauce.browser="internet explorer" 
     
      - maven/test:
          name: "Static Analysis"
          command: 'clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar 
                     -Dsonar.host.url=https://sonarcloud.io 
                     -Dsonar.organization=circleci-demo 
                     -Dsonar.login=${SONAR_KEY} 
                     -Dsonar.branch.name=${CIRCLE_BRANCH}'
          requires:
            - "Unit Test"

      - package-jar:
          requires:
            - "Unit Test"
          filters:
            branches:
              only: master

      - cloudfoundry/dark_deploy:
          requires:
            - package-jar
          filters:
            branches:
              only: master
          context: Demos-Context
          appname: blueskygreenbuilds
          org: eddies-org
          space: circleci
          workspace_path: /tmp
          manifest: /tmp/cf-manifest.yml
          package: /tmp/standalone-app.jar
          domain: blueskygreenbuilds.com
          validate_steps:
            - slack/notify:
                message: "The latest inventory is ready to ship, please review/approve ASAP! https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
                mentions: UA8FDUL8P

      - hold:
          type: approval
          requires:
            - cloudfoundry/dark_deploy
            - "IE Tests"
            - "Chrome Tests"
          filters:
            branches:
              only: master
              
      - cloudfoundry/live_deploy:
          requires:
            - hold
          filters:
            branches:
              only: master
          context: Demos-Context
          appname: blueskygreenbuilds
          org: eddies-org
          space: circleci
          domain: blueskygreenbuilds.com


jobs:
  sum-coverage:
    docker:
      - image: circleci/node:10
        environment:
          PARTS: 2
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: coverage
      - run:
          name: Aggregate Code Coverage
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter sum-coverage --output - --parts $PARTS coverage/codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -
     

  package-jar:
    docker:
      - image: circleci/openjdk@sha256:76e4d88773f25ac52c3f0c63bf63b8e346ce799fbfe3691566f03d987795c70f
    working_directory: ~/repo
    steps:
      - checkout
      - maven/with_cache:
          steps: 
            - run: mvn package -B -DskipTests=true
      - run:
          name: Copy deployment artifacts to workspace
          command: |
            cp target/blueskygreenbuilds-*.jar /tmp/standalone-app.jar
            cp src/main/resources/deployment/cf-manifest.yml /tmp/
      - store_artifacts:
          path: /tmp/standalone-app.jar
      - store_artifacts:
          path: /tmp/cf-manifest.yml
      - persist_to_workspace:
          root: /tmp
          paths:
            - standalone-app.jar
            - cf-manifest.yml
