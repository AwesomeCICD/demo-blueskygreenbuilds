version: 2.1
orbs:
  cloudfoundry: circleci/cloudfoundry@0.1.12
  slack:        circleci/slack@1.0.0
  saucelabs:    saucelabs/sauce-connect@1.0.1
  maven:        circleci/maven@0.0.4
  build-auditor:
    jobs:
      check_context_usage:
        parameters:
          production-branch: 
            default: main
            description: The name of the production branch. Usually main or master.
            type: string
          production-context-keyword:
            default: production
            description: any context containing this string will be consisder production
            type: string
          scan-period:
            default: 24
            type: integer
            description: number of hours to scan history. NOT IMPLEMENTED
          project-token-var-name:
            default: CIRCLECI_API_KEY
            description: The local variable name for a READ ONLY project project-token
            type: env_var_name
        docker:
            - image: cimg/base:stable
        steps:
          - run:
              name: load previsou period build summaries
              command: |
                mkdir reports
                # get all rcent builds
                curl -H "Circle-Token: ${<< parameters.project-token-var-name >>}" "https://circleci.com/api/v1.1/recent-builds" > recent-builds.json
                # fitler to key info
                jq '[.[] | {build_url,branch,context_ids, user_login: .user.login, user_full_name: .user.name, user_email: .committer_email, job_id: .workflows.job_id}]' recent-builds.json > reports/summary.json
                # find violations using prodcution cotnext not on producuton branhc
                # could be json, csv, etc.
                jq '[.[] | select(.context_ids[] | match("<< parameters.production-context-keyword >>";"i")) |  select(.branch != "<< parameters.production-branch >>")]' reports/summary.json > reports/violations.json
          - store_artifacts:
              path: reports
          - run:
              name: Fail build if violations found.
              command: |
                VIOLATIONS=`jq '. | length' reports/violations.json`
                if [[ $VIOLATIONS != 0 ]]; then
                  echo "${VIOLATIONS} Context access violatinos found. Please see reports/violations.json"
                  exit 1
                fi
          ## optinoall call slack orb, webhooks, etc.

workflows:
  version: 2
  nightly_auditor:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only: [master]
    jobs:
      - build-auditor/check_context_usage
    
  build_deploy:
    jobs:
      - unit-test:
          context: Production-Only  #we'll see this is caught by nightly auditor as invalid.
      - sum-coverage:
          requires:
            - unit-test
      - saucelabs/with_proxy:
          name: "Chrome Tests"
          requires:
            - unit-test
          tunnel_identifier: chrome
          steps:
            - maven/with_cache:
                steps:
                  - run: ./mvnw verify -B -Dspring.profiles.active=it -Dsauce.tunnel="chrome" 
      - saucelabs/with_proxy:
          name: "IE Tests"
          requires:
            - unit-test
          tunnel_identifier: ie
          steps:
            - maven/with_cache:
                steps:
                  - run: ./mvnw verify -B -Dspring.profiles.active=it -Dsauce.version=11.103 -Dsauce.tunnel="ie" -Dsauce.browser="internet explorer"    
      - maven/test:
          name: "Static Analysis"
          command: 'clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar 
                     -Dsonar.host.url=https://sonarcloud.io 
                     -Dsonar.organization=circleci-demo 
                     -Dsonar.login=${SONAR_KEY} 
                     -Dsonar.branch.name=${CIRCLE_BRANCH}'
          requires:
            - unit-test
      - package-jar:
          requires:
            - unit-test
          filters:
            branches:
              only: master
      - package-docker:
          requires:
            - unit-test
          filters:
            branches:
              only: master


jobs:
  unit-test:
    docker:
      - image: circleci/openjdk:8
    parallelism: 2
    steps:
      - checkout
      - run:
          name: Enable Test Splitting
          command: |
            mkdir -p .circleci/tests/

            # generate excluded surefire tests using provided pattern
            circleci tests glob src/test/java/**/*Test*.java | \
              sed -e 's#^src/test/java/\(.*\)\.java#\1#' | \
              tr "/" "." > .circleci/tests/surefire_classnames
            cat .circleci/tests/surefire_classnames | \
              circleci tests split --split-by=timings --timings-type=classname > /tmp/this_node_tests
            cat .circleci/tests/surefire_classnames | \
              grep -xvf /tmp/this_node_tests > .circleci/tests/surefire_classnames_ignore_list
      - store_artifacts:
          path: .circleci/tests/
      - maven/with_cache:
          steps:
            - run:
                name: Run Tests
                command: mvn test -B -Dsurefire.excludesFile=.circleci/tests/surefire_classnames_ignore_list 
      - maven/process_test_results:
          test_results_path: target/surefire-reports
      - run:
          name: Collect Code Cov
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./mvnw jacoco:report #convert binary jacoco.exec to XML in target/site/jacoco
            export JACOCO_SOURCE_PATH="src/main/java"
            ./cc-test-reporter format-coverage -t jacoco  target/site/jacoco/jacoco.xml -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"
      - persist_to_workspace:
          root: coverage
          paths:
            - codeclimate.*.json
    
  sum-coverage:
    docker:
      - image: circleci/node:10
        environment:
          PARTS: 2
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: coverage
      - run:
          name: Aggregate Code Coverage
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter sum-coverage --output - --parts $PARTS coverage/codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -
     
  package-jar:
    docker:
      - image: circleci/openjdk:17-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - maven/with_cache:
          steps: 
            - run: mvn package -B -DskipTests=true
      - run:
          name: Copy deployment artifacts to workspace
          command: |
            cp target/blueskygreenbuilds-*.jar /tmp/standalone-app.jar
            cp src/main/resources/deployment/cf-manifest.yml /tmp/
      - store_artifacts:
          path: /tmp/standalone-app.jar
      - store_artifacts:
          path: /tmp/cf-manifest.yml
      - persist_to_workspace:
          root: /tmp
          paths:
            - standalone-app.jar
            - cf-manifest.yml

  package-docker:
    docker:
      - image: circleci/openjdk:17-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - blueskygreenbuilds-mvn-V2-{{ checksum "pom.xml" }}
            - blueskygreenbuilds-mvn-V2
      - run: mvn dependency:go-offline
      - run: cp .mvnw/wrapper/settings.xml ~/.m2/settings.xml
      - run: echo "<settingsSecurity><master>${maven_security_master}</master></settingsSecurity>" > ~/.m2/settings-security.xml
      - run:
          name: Package Docker image with Jib
          command: |
            mvn compile jib:build -B -DskipTests=true -Dcircle_build_num=${CIRCLE_BUILD_NUM} -Dcircle_commit=${CIRCLE_SHA1} -Dcircle_workflow_guid=${CIRCLE_WORKFLOW_ID} -Dcircle_user=${CIRCLE_PROJECT_USERNAME} -Dcircle_repo=${CIRCLE_PROJECT_REPONAME}git