workflows:
  version: 2
  build-deploy:
    jobs:
      - unit-test
      - test-chrome:
          requires:
            - unit-test
      - test-ie:
          requires:
            - unit-test
     #- test-macosx-safari:
     #    requires:
     #      - unit-test
      - package:
          requires:
            - test-ie
            - test-chrome
           # - test-macosx-safari
      - dark-deploy:
          requires:
            - package
          filters:
            branches:
              only: master
      - hold:
          type: approval
          requires:
            - dark-deploy
          filters:
            branches:
              only: master
      - live-deploy:
          requires:
            - hold
          filters:
            branches:
              only: master



version: 2
jobs:
  unit-test:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: blueskygreenbuilds-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
           - ~/.m2
          key: blueskygreenbuilds-{{ checksum "pom.xml" }}
      - run:
          name: Build and *unit* test
          command: |
            mvn test -B  #run your tests

      - store_test_results:
          path: target/surefire-reports


  test-chrome:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: blueskygreenbuilds-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
           - ~/.m2
          key: blueskygreenbuilds-{{ checksum "pom.xml" }}

      - run:
          name: Start SauceLabs Tunnel (required if testing on CircleCI container)
          command: |
            : ${SAUCELABS_USER:?"Required Env Variable not found!"}
            : ${SAUCELABS_KEY:?"Required Env Variable not found!"}
            curl https://saucelabs.com/downloads/sc-4.4.12-linux.tar.gz -o saucelabs.tar.gz
            tar -xzf saucelabs.tar.gz
            cd sc-*
            # startup saucelabs tunnel as background task (its a blocking command)
            bin/sc -u ${SAUCELABS_USER} -k ${SAUCELABS_KEY} -i chrome &
            #wait for sauce tunnel up to 1 minute
            wget --retry-connrefused --no-check-certificate -T 60 localhost:4445

      - run:
          name: Build and Integration test
          command: |
            mvn verify -B -Dspring.profiles.active=it -Dsauce.browser=chrome  -Dsauce.tunnel="chrome" #package and run your browser tests
            killall sc #kill saucelabs tunnel


  test-ie:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: blueskygreenbuilds-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
           - ~/.m2
          key: blueskygreenbuilds-{{ checksum "pom.xml" }}

      - run:
          name: Start SauceLabs Tunnel (required if testing on CircleCI container)
          command: |
            : ${SAUCELABS_USER:?"Required Env Variable not found!"}
            : ${SAUCELABS_KEY:?"Required Env Variable not found!"}
            curl https://saucelabs.com/downloads/sc-4.4.12-linux.tar.gz -o saucelabs.tar.gz
            tar -xzf saucelabs.tar.gz
            cd sc-*
            # startup saucelabs tunnel as background task (its a blocking command)
            bin/sc -u ${SAUCELABS_USER} -k ${SAUCELABS_KEY} -i ie &
            #wait for sauce tunnel up to 1 minute
            wget --retry-connrefused --no-check-certificate -T 60 localhost:4445

      - run:
          name: Build and Integration test
          command: |
            mvn verify -B -Dspring.profiles.active=it -Dsauce.version=11.103 -Dsauce.tunnel="ie" -Dsauce.browser="internet explorer" #package and run your browser tests
            killall sc #kill saucelabs tunnel


  test-macosx-safari:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: blueskygreenbuilds-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
           - ~/.m2
          key: blueskygreenbuilds-{{ checksum "pom.xml" }}

      - run:
          name: Start SauceLabs Tunnel (required if testing on CircleCI container)
          command: |
            : ${SAUCELABS_USER:?"Required Env Variable not found!"}
            : ${SAUCELABS_KEY:?"Required Env Variable not found!"}
            curl https://saucelabs.com/downloads/sc-4.4.12-linux.tar.gz -o saucelabs.tar.gz
            tar -xzf saucelabs.tar.gz
            cd sc-*
            # startup saucelabs tunnel as background task (its a blocking command)
            bin/sc -u ${SAUCELABS_USER} -k ${SAUCELABS_KEY} -i safari &
            #wait for sauce tunnel up to 1 minute
            wget --retry-connrefused --no-check-certificate -T 60 localhost:4445

      - run:
          name: Build and Integration test
          command: |
            mvn verify -B -Dspring.profiles.active=it -Dsauce.browser="safari" -Dsauce.tunnel="safari" -Dsauce.platform="OS X 10.11" -Dsauce.version="10" #package and run your browser tests
            killall sc #kill saucelabs tunnel



  package:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: blueskygreenbuilds-{{ checksum "pom.xml" }}
      - run: mvn dependency:go-offline
      - save_cache:
          paths:
           - ~/.m2
          key: blueskygreenbuilds-{{ checksum "pom.xml" }}
      - run:
          name: Package Jar
          command: |
            mvn package -B -DskipTests=true
      - run:
          name: Copy deployment artifacts to workspace
          command: |
            cp target/blueskygreenbuilds-*.jar /tmp/standalone-app.jar
            cp src/main/resources/deployment/cf-manifest.yml /tmp/
      - store_artifacts:
          path: /tmp/standalone-app.jar
      - store_artifacts:
          path: /tmp/cf-manifest.yml
      - persist_to_workspace:
                root: /tmp
                paths:
                  - standalone-app.jar
                  - cf-manifest.yml

  dark-deploy:
    docker:
      #- image: eddiewebb/queue-circleci-openjdk:8-jdk-browsers
      - image: circleci/openjdk:8-jdk
    working_directory: ~/deploy
    steps:
      # why rebuild something we already tested, rebuilding invalidates any previous confidence?!
      - attach_workspace:
          at: /tmp

      #- run: queueBuildUntilFrontOfLine 5 #do not run parallel deployments
      - run:
          name: Setup CF CLI
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.run.pivotal.io
            cf auth $CF_USER $CF_PASSWORD
            cf target -o eddies-org -s circleci

      - run:
          name: CF Deploy
          command: |
            # Copy deployable jar and CF Manifest to current dir
            cp /tmp/standalone-app.jar .
            cp /tmp/cf-manifest.yml .
            cf push --no-start blueskygreenbuilds-dark -f cf-manifest.yml -p standalone-app.jar -n dark -d blueskygreenbuilds.com
            cf set-env blueskygreenbuilds-dark circle_build_num ${CIRCLE_BUILD_NUM}
            # Push as "dark" instance (URL in manifest)
            cf start blueskygreenbuilds-dark
            # Ensure dark route is exclusive to dark app
            cf unmap-route blueskygreenbuilds blueskygreenbuilds.com -n dark || echo "Already exclusive"
            # Verify new version is working on dark URL.
            HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" http://dark.blueskygreenbuilds.com/`
            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route note available, failing deploy"
              exit 1
            fi


  live-deploy:
    docker:
      #- image: eddiewebb/queue-circleci-openjdk:8-jdk-browsers
      - image: circleci/openjdk:8-jdk
    working_directory: ~/deploy
    steps:
      # why rebuild something we already tested, rebuilding invalidates any previous confidence?!
      - attach_workspace:
          at: /tmp

      #- run: queueBuildUntilFrontOfLine 5 #do not run parallel deployments
      - run:
          name: Setup CF CLI
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.run.pivotal.io
            cf auth $CF_USER $CF_PASSWORD
            cf target -o eddies-org -s circleci

      - run:
          name: Re-route live Domain to latest
          command: |
            # Verify new version is working on dark URL.
            HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" http://dark.blueskygreenbuilds.com/`
            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route note available, failing deploy"
              exit 1
            fi
            # Send "real" url to new version
            cf map-route blueskygreenbuilds-dark blueskygreenbuilds.com -n www
            sleep 30  # give time to demo round robin
            # Stop sending traffic to previous version
            cf unmap-route blueskygreenbuilds blueskygreenbuilds.com -n www
            # stop previous version
            cf stop blueskygreenbuilds
            # delete previous version
            cf delete blueskygreenbuilds -f
            # Switch name of "dark" version to claim correct name
            cf rename blueskygreenbuilds-dark blueskygreenbuilds

